/*The MMMap class is the main AS class.  It does the following:*Sets constants*Initializes important vars*Draws sprites needed to start *Contains a random number generator*/package {		import flash.display.MovieClip;	import flash.display.*	import flash.text.*	import flash.events.*	import flash.net.URLRequest;	import flash.sampler.Sample;	import flash.utils.*		import flashx.textLayout.elements.InlineGraphicElement;		public class MMMap extends MovieClip {		trace("*MMMap: Form Load");		//this static main property can be used to refer to this game object from anywhere easily using MMMap.main 		static public var main;				static public var revision:int = 229;		public var totalAssets:int;				public var map:Sprite;				public var item:Sprite;				public var asset:Sprite;				//constants		static public var WIDTH:int = 800;		static public var HEIGHT:int = 600;		static public var SPAWNPOINT:int = 22; //which mapframe to start the game at						static public var TOTALITEMS:int = 27;		static public var TOTALASSETS:int = 25;		static public var TOTALMAP:int = 45;				public function MMMap(){			//set the static main property to this game object so we can always just use "MMMap.main" to refer to our game from other classes			main = this;						spawnItem.addEventListener(MouseEvent.CLICK, spawnItemClick);			spawnAsset.addEventListener(MouseEvent.CLICK, spawnAssetClick);			mapList.addEventListener(MouseEvent.CLICK, changeMapClick);						clearAll.addEventListener(MouseEvent.CLICK, clearAllClick);						export.addEventListener(MouseEvent.CLICK, exportClick);						populateLists();					}		public function populateLists(){			itemList.removeAll();			assetList.removeAll();			mapList.removeAll();			var i:int=1;			while (i <= TOTALITEMS)			{				itemList.addItem({label:translateItem(i, false), data:i});				i++;			}			i=1;			while (i <= TOTALASSETS)			{				assetList.addItem({label:translateAsset(i), data:i});				i++;			}			i=1;			while (i <= TOTALMAP)			{				mapList.addItem({label:i, data:i});				i++;			}			map = new Map();			mapClip.addChild(map);			item = new Item(200, 200, 1); //or 429 for bottom row			itemClip.addChild(item);			asset = new Asset(300, 300, 1); //or 429 for bottom row			assetClip.addChild(asset);		}		public function spawnItemClick(e:Event){			item = new Item(200, 200, itemList.selectedItem.data); //or 429 for bottom row			itemClip.addChild(item);		}				public function spawnAssetClick(e:Event){			asset = new Asset(300, 300, assetList.selectedItem.data); //or 429 for bottom row			assetClip.addChild(asset);		}				public function changeMapClick(e:Event){			Map.main.changeMap(mapList.selectedItem.data);		}				public function clearAllClick(e:Event){			Item.main.removeItems();			Asset.main.removeAssets();		}				public function exportClick(e:Event){			var i:int=0;			output.text = "//Item Output\ncase " + Map.main.currentFrame + ":\n";			while(i<Item.list.length) //while there are assets, remove them			{				//if (Item.main.checkItems(18) == false){Item.main.spawnItems(270,110,18);}				output.appendText("\tif (Item.main.checkItems(" + String(Item.list[i].currentFrame) + ") == false){Item.main.spawnItems(" + String(Item.list[i].x) + "," + String(Item.list[i].y) + "," + String(Item.list[i].currentFrame) + ");}\n");				i++;			}			i=0;			output.appendText("\tbreak;\n\n//Asset Output\ncase " + Map.main.currentFrame + ":\n");			while(i<Asset.list.length) //while there are assets, remove them			{				//Asset.main.spawnAssets(400,200,1);				output.appendText("\tAsset.main.spawnAssets(" + String(Asset.list[i].x) + "," + String(Asset.list[i].y) + "," + String(Asset.list[i].currentFrame) + ");}\n");				i++;			}			output.appendText("\tbreak;\n");		}				public function randomNumber(low:Number=0, high:Number=1):Number //returns a random number between low and high		{		  return Math.floor(Math.random() * (1+high-low)) + low;		}			public function translateItem(iType:Number, fullText:Boolean)		{			var textType:String;			var descType:String;			switch (iType)			{				case 1:					textType="Knife";					descType="A very sharp french chef's knife.";					break;				case 2:					textType="Key (Car)";					descType="This key looks to fit a car.";					break;				case 3:					textType="Key (Interior)";					descType="This key looks to fit a door.";					break;				case 4:					textType="Belt";					descType="A brown leather belt that seems to excel at holding pants up.";					break;				case 5:					textType="Rat Poison";					descType="Kills rats dead.";					break;				case 6:					textType="Cigarette";					descType="Delicious sticks of tobacco made for smoking.";					break;				case 7:					textType="Lighter";					descType="Excellent for lighting things on fire.";					break;				case 8:					textType="Can Of Gas";					descType="A gallon of gasoline in a red plastic container."					break;				case 9:					textType="Powdered Lemonaide";					descType="Delicious lemonaide mix.  Just add water!"					break;				case 10:					textType="Necktie";					descType="A silk necktie with a lovely pattern on it."					break;				case 11:					textType="Gun";					descType="A 9mm handgun.  Dangerous in the wrong hands.";					break;				case 12:					textType="Bullets";					descType="These fit a 9mm handgun.";					break;				case 13:					textType="Stapler";					descType="A wonderful device used to bind pages together with metal.";					break;				case 14:					textType="Staples";					descType="Tiny bits of sharp metal that fit in a stapler.";					break;				case 15:					textType="Paperclip";					descType="A bent piece of metal meant to hold paper together.";					break;				case 16:					textType="Bucket";					descType="This bucket will hold fluids and non-fluids alike.  Truly a wonder!";					break;				case 17:					textType="Screwdriver";					descType="Used to secure fasteners into various materials.";					break;				case 18:					textType="Cheese";					descType="A delicious smoked gouda.";					break;				case 19:					textType="Flute";					descType="A beautiful woodwind instrument.";					break;				case 20:					textType="Paperweight";					descType="A very heavy piece of glass used to hold papers down. ";					break;				case 21:					textType="Wad Of Cash";					descType="A bunch of bills in a money clip.";					break;				case 22:					textType="Blood Thinners";					descType="These pills will thin out your blood.  You probably shouldn't take them.";					break;				case 23:					textType="Tape";					descType="This clear tape is great for sticking things to other things.";					break;				case 24:					textType="Plastic Bag";					descType="This airtight bag will hold all sorts of things.";					break;				case 25:					textType="Garden Hose";					descType="Liquids and gasses flow through this long tube.";					break;				case 26:					textType="Stack Of Papers";					descType="A bunch of papers in a stack.";					break;				case 27:					textType="Taco";					descType="Because our artist drew it, and it looks delicious.";					break;				case 40:					textType="Antimatter Cube";					descType="A cube of solid antimatter.  It's probably valuable, or worthless.  One of those.";					break;			}			if (fullText == true){return (textType + " - " + descType);}else{return textType;}		}				public function translateAsset(iType:Number)		{			switch (iType)			{				case 1:					return "Desk 1";				case 2:					return "Desk Morton";				case 3:					return "Shelf";				case 4:					return "Shredder";				case 5:					return "Car";				case 6:					return "Server Rack";				case 7:					return "Freezer Door";				case 8:					return "Outlet";				case 9:					return "Rest+Table";				case 10:					return "Rest+Table+Cust";				case 11:					return "Vending Machine";				case 12:					return "Elevator Control";				case 13:					return "Baler";				case 14:					return "Chair - Male";				case 15:					return "Chair - Empty";				case 16:					return "Chair - Female";				case 17:					return "Desk + Comp";				case 18:					return "Desk + Comp (L)";				case 19:					return "Filing Cabinet";				case 20:					return "Front Desk";				case 21:					return "Fire Hydrant";				case 22:					return "Plant 1";				case 23:					return "Trash Can Empty";				case 24:					return "Trash Can Full";			}					}			}	}