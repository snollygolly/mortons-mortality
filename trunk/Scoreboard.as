/*The Scoreboard class creates controls the falling alien movie clips when enemy ships are destroyed.*/package{	import flash.display.*	import flash.events.*	import flash.net.*	import flash.utils.Timer;	import flash.text.TextFieldAutoSize;	import flashx.textLayout.elements.InlineGraphicElement;	import fl.controls.List; 	import flash.text.TextField; 	import flash.utils.Endian;	import flashx.textLayout.formats.ITabStopFormat;		public class Scoreboard extends MovieClip	{		//the list is an array of all men on stage		static public var main;		static public var currentDeath;		static public var totalTears:int;				static public var totalDeaths:int;		static public var deathDone:Array= [];		public function Scoreboard()		{			main = this;			clearWindow();			mouseEnabled=false;			totalDeaths=8;			populateList();			listBox.addEventListener(MouseEvent.CLICK, showData); 			btnClose.addEventListener(MouseEvent.CLICK, closeWindow);			goForIt.addEventListener(MouseEvent.CLICK, goingForIt);						confirmationBox.dieButton.addEventListener(MouseEvent.CLICK, doDeath);			confirmationBox.liveButton.addEventListener(MouseEvent.CLICK, doLife);						deadScreen.againButton.addEventListener(MouseEvent.CLICK, tryAgain);			deadScreen.stayDeadButton.addEventListener(MouseEvent.CLICK, stayDead);		}				//this logic will happen at frame rate		public function enterFrame(e:Event)		{					}				public function doDeath(e:Event){			showDead(currentDeath);			//die!		}				public function doLife(e:Event){			closeWindow(e);			//live!		}				public function tryAgain(e:Event){			Map.main.changeMap(MM.SPAWNPOINT, "x");			Map.main.saveMorton(MM.SPAWNPOINT);			closeWindow(e);			//die!		}				public function stayDead(e:Event){			closeWindow(e);			MM.main.resetGame();			//live!		}				public function populateList(){			var i = 1;			while (i <= totalDeaths)			{				deathDone[i] = false;				listBox.addItem({label:Tooltip.main.translateDeath(i, 1), data:i});				i++;			}		}				public function clearWindow(){			textDesc.text = "";			textNeed.text = "";			textHave.text = "";			goForIt.visible=false;			labelHave.visible=false;			labelNeed.visible=false;			confirmationBox.visible=false;			deadScreen.visible=false;		}				public function closeWindow(e:Event){			MM.main.scoreboard.visible=false;			stage.focus = Morton.main;		}				public function showWindow(){			clearWindow();			MM.main.scoreboard.visible=true;		}				public function goingForIt(e:Event){			showConfirm(listBox.selectedItem.data);		}				public function showConfirm(dType:int){			showWindow();			currentDeath=dType;			confirmationBox.visible=true;			if (deathDone[dType] == false){confirmationBox.confirmText.text = "Are you sure you want to do this? It could be dangerous...";}			else{confirmationBox.confirmText.text = "Are you sure you want to do this? It didn't end so well last time";}		}				public function showDead(dType:int){			showWindow();			deadScreen.visible=true;			deadScreen.deathText.text = Tooltip.main.translateDeath(dType, 1);			if (deathDone[dType] == false){deadScreen.deathText.appendText(" (new)");}			deathDone[dType] = true;			var people:int = Tooltip.main.translateDeath(dType, 3);			if (people == 1){deadScreen.deathScore.text = people + " person came to your funeral";}			else{deadScreen.deathScore.text = people + " people came to your funeral";}			//function to get criers			var criers:int = 1;			if (criers == 1){deadScreen.deathScore.appendText("\n" + criers + " person cried");}			else{deadScreen.deathScore.appendText("\n" + criers + " people cried");}			totalTears += (criers * 5);			deadScreen.deathScore.appendText("\n" + totalTears + " total tears");		}				function showData(event:Event) { 			clearWindow();			textDesc.text = "Description: " + Tooltip.main.translateDeath(listBox.selectedItem.data, 2);			if (deathDone[listBox.selectedItem.data] == true){textDesc.appendText("\n (already done)");}			switch (listBox.selectedItem.data){				case 1:					if (Item.main.checkItems(1) == true){textHave.appendText (Tooltip.main.translateItems(1, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					break;				case 2:					if (Map.main.currentFrame == 7){textHave.appendText ("The Street, ");}else{textNeed.appendText ("Specific Location, ");}					break;				case 3:					if (Item.main.checkItems(9) == true){textHave.appendText (Tooltip.main.translateItems(9, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					if (Item.main.checkItems(5) == true){textHave.appendText (Tooltip.main.translateItems(5, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					break;				case 4:					if (Item.main.checkItems(4) == true){textHave.appendText (Tooltip.main.translateItems(4, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					break;				case 5:					if (Map.main.currentFrame == 40 || Map.main.currentFrame == 44){textHave.appendText ("The Roof, ");}else{textNeed.appendText ("Specific Location, ");}					break;				case 6:					if (Item.main.checkItems(7) == true){textHave.appendText (Tooltip.main.translateItems(7, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					if (Item.main.checkItems(8) == true){textHave.appendText (Tooltip.main.translateItems(8, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					break;				case 7:					if (Item.main.checkItems(11) == true){textHave.appendText (Tooltip.main.translateItems(11, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					if (Item.main.checkItems(12) == true){textHave.appendText (Tooltip.main.translateItems(12, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					break;				case 8:					if (Map.main.currentFrame == 26){textHave.appendText ("The Supply Room, ");}else{textNeed.appendText ("Specific Location, ");}					if (Item.main.checkItems(10) == true){textHave.appendText (Tooltip.main.translateItems(10, false) + ", ");}else{textNeed.appendText ("???" + ", ");}					break;			}			if (textHave.text != ""){textHave.appendText("*");textHave.text = textHave.text.replace(", *", "");}			if (textNeed.text != ""){textNeed.appendText("*");textNeed.text = textNeed.text.replace(", *", "");}			if (textNeed.text == ""){labelHave.visible=true;goForIt.visible=true;}			else if (textHave.text == ""){labelNeed.visible=true;}			else{labelHave.visible=true;labelNeed.visible=true;}		}	}}