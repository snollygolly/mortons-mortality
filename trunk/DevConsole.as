/*The DevConsole class allows the devs to do cool things :3*/package{	import flash.display.*	import flash.events.*	import flash.net.*		import flash.sampler.StackFrame;	public class DevConsole extends MovieClip	{		//the list is an array of all men on stage		static public var main;		public function DevConsole()		{			//add this alien to the list of aliens			main = this;			this.visible = false;			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			devDisplay.text = "Morton's Mortality Dev Console - Rev " + MM.revision;			devDisplay.mouseWheelEnabled=true;		}		//event for key press		public function keyDownHandler(e:KeyboardEvent)		{						//dev console ~ trap			if (e.keyCode == 119 && MM.devEnabled == true)			{				if (this.visible == false)				{					//pause?					this.visible=true;					devInput.text=" "; //a SPACE or temp "foo" text, but NOT empty !					devInput.stage.focus = devInput; devInput.setSelection(devInput.length,devInput.length);					devInput.text = "";				}				else				{					this.visible=false;				}			}			if (visible == true)			{				if (Key.isDown(16) == true)				{					devPrompt.text = "";					var isCheating:Boolean = false;					var inputArray:Array;					var temp:String;					inputArray = new Array ("x", "0", "x");					trace ("*Dev Console: passed!");					inputArray[0] = devInput.text;					if (inputArray[0].search(" ") >=0){						inputArray = inputArray[0].split(" ");					}										switch (inputArray[0])					{						case "help":							if (inputArray[1] == 0) {devDisplay.appendText ("\n Help: command variable options\n Commands: describe, spawnitem, teleport");}							else if (inputArray[1] == "describe"){devDisplay.appendText ("\n Command - Describe - Use to get the friendly name of an item\n Variable: item number\n Options: -v to give tooltip too");}							else if (inputArray[1] == "spawnitem"){devDisplay.appendText ("\n Command - Spawnitem - Used to spawn an item\n Variable: item number");}							else if (inputArray[1] == "teleport"){devDisplay.appendText ("\n Command - Teleport - Used to teleport the user\n Variable: map frame");}							break;						case "describe":							var verbose:Boolean = false;							if (inputArray[1] == 0){devDisplay.appendText ("\nNo value given");break;}							if (inputArray[2] == "-v"){								devDisplay.appendText ("\nVerbose On");								verbose = true;							}							temp = Tooltip.main.translateItems(inputArray[1], verbose);							devDisplay.appendText ("\n Describe Item #" + inputArray[1] + " - " + temp);							break;						case "spawnitem":							if (inputArray[1] == 0){devDisplay.appendText ("\nNo value given");break;}							Item.main.spawnItems(100,200,inputArray[1]);							temp = Tooltip.main.translateItems(inputArray[1], false);							devDisplay.appendText ("\n Item " + temp + " spawned");							break;						case "teleport":							if (inputArray[1] == 0){devDisplay.appendText ("\nNo value given");break;}							Map.main.changeMap(inputArray[1], "x");							devDisplay.appendText ("\n Teleported to frame: " + inputArray[1]);							break;					}					devDisplay.appendText ("\n>" + devInput.text);					if (isCheating == true){						devDisplay.appendText ("\nisCheating set to true.  Scoring disabled");					}					devDisplay.scrollV = devDisplay.maxScrollV;					devInput.text = "";					devPrompt.text = ">";				}				return;			}								}							}}