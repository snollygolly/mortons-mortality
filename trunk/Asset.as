/*The Asset Class handles the spawning and movement of all items (items are objects that can be interacted with and picked up)*/package{	import flash.display.*	import flash.events.*		public class Asset extends MovieClip	{		//the list is an array of all items on stage		static public var list:Array= [];		static public var main;		static public var iMarker:int; //used to reference a mouseevent object against the list of objects 						public function Asset(x_, y_, iType:int)		{			main=this;			//add the item to the list of all items			list.push(this);			//set iType (item type)			gotoAndStop(iType);			x = x_;			y = y_;			assetHit.mouseEnabled=false;			assetHit.alpha=0;			hitArea=assetHit; //for collisions			//add event listeners for mouse up and down			addEventListener(MouseEvent.MOUSE_DOWN, dragDropDn);			addEventListener(MouseEvent.MOUSE_UP, dragDropUp);			addEventListener(MouseEvent.ROLL_OVER, itemOver);			addEventListener(MouseEvent.ROLL_OUT, itemOut);		}				public function dragDropDn(e:MouseEvent)		{			var object = e.target;			for(var i:int=0; i<list.length; i++) //check to see which item was drug			{				if (object == list[i]){ //items match					iMarker = i;					trace ("*Asset: imarker: " + iMarker);				}			}		}				public function dragDropUp(e:MouseEvent)		{			var obj = e.target;					}				public function itemOver(e:MouseEvent){			var obj = e.target;			var tempTip:String;			tempTip = Tooltip.main.translateAssets(obj.currentFrame, Map.main.currentFrame);			if (tempTip != "x"){Tooltip.main.displayText(tempTip);}		}				public function itemOut(e:MouseEvent){			Tooltip.main.clearText();		}				public function hideAssets(){ //hides all items in item bar			for(var i:int=0; i<Asset.list.length; i++) //check for collisions with all items			{					Asset.list[i].visible=false;			}		}				public function showAssets(){ //shows all items in item bar			for(var i:int=0; i<Asset.list.length; i++) //check for collisions with all items			{					Asset.list[i].visible=true;			}		}						public function spawnAssets(x_,y_, iType){ //mostly for use from other classes			MM.main.asset = new Asset(x_, y_, iType);			MM.main.assetClip.addChild(MM.main.asset);		}				public function removeAssets(){ //used to remove all items that aren't in the inventory			var i:int=0;			while(i<list.length) //check for collisions with all items			{				list[i].removeEventListener(MouseEvent.MOUSE_DOWN, dragDropDn);				list[i].removeEventListener(MouseEvent.MOUSE_UP, dragDropUp);				list[i].removeEventListener(MouseEvent.ROLL_OVER, itemOver);				list[i].removeEventListener(MouseEvent.ROLL_OUT, itemOut);				//remove my grpahic from the stage				MM.main.assetClip.removeChild(list[i]);				list.splice(i,1);			}					}						//this method will destory all items in the item list		static public function killAll()		{			//keep killing the fisrt item in the list until the list is empty			while(list.length>0)			{				list[0].kill();			}		}				//this method will kill this item instance		public function kill()		{			trace ("*Asset: finding [" + Tooltip.main.translateAssets(this.currentFrame, false) + "(" + this.currentFrame + ")]");			for(var i:int = 0;i < list.length; i++)			{				trace ("*Asset: kill(list): i:" + i + "/" + list.length + " - currentFrame:" + list[i].currentFrame);				//if this list index is me				if(list[i] == this)				{					// remove me from the item list					trace ("*Asset: kill(splice): i:" + i + "/" + list.length + " - currentFrame:" + list[i].currentFrame);					list.splice(i,1);				}			}			//remove my mouse events			removeEventListener(MouseEvent.MOUSE_DOWN, dragDropDn);			removeEventListener(MouseEvent.MOUSE_UP, dragDropUp);			removeEventListener(MouseEvent.ROLL_OVER, itemOver);			removeEventListener(MouseEvent.ROLL_OUT, itemOut);			//remove my grpahic from the stage			MM.main.SpriteClip.removeChild(this);			trace ("*Asset: kill(done)");		}	}}