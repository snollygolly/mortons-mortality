/*The Action Class handles the spawning and movement of all action related items*/package{	import flash.display.*	import flash.events.*		public class Action extends MovieClip	{		//the list is an array of all items on stage		static public var list:Array= [];		static public var main;		static public var oldSpotX, oldSpotY:int; //holds current coords when an item is picked up (so it can be returned or swapped)		static public var iMarker:int; //used to reference a mouseevent object against the list of objects 						public function Action(iType:int)		{			main=this;			//add the item to the list of all items			list.push(this);			//set iType (item type)			gotoAndStop(iType);			placeAction(iType);			//add event listeners for mouse up and down			addEventListener(MouseEvent.MOUSE_DOWN, dragDropDn);			addEventListener(MouseEvent.MOUSE_UP, dragDropUp);			addEventListener(MouseEvent.ROLL_OVER, actionOver);			addEventListener(MouseEvent.ROLL_OUT, actionOut);		}				public function placeAction(iType:int)		{			switch (iType){				case 1:					x = 8;					y = 373;					break;			}		}				public function dragDropDn(e:MouseEvent)		{			var object = e.target;			oldSpotX = object.x; //back up the positions			oldSpotY = object.y;			for(var i:int=0; i<list.length; i++) //check to see which item was drug			{				if (object == list[i]){ //items match					iMarker = i;					trace ("*Action: imarker: " + iMarker);				}			}			Hotbar.main.collapseBars();		}				public function dragDropUp(e:MouseEvent)		{			var obj = e.target;		}				public function actionOver(e:MouseEvent){			var obj = e.target;			Tooltip.main.displayText(Tooltip.main.translateActions(obj.currentFrame, true));		}				public function actionOut(e:MouseEvent){			Tooltip.main.clearText();		}				public function hideActions(){ //hides all actions in action bar			for(var i:int=0; i<Action.list.length; i++) //check for collisions with all items			{				Action.list[i].visible = false; //540 488			}		}				public function showActions(){ //shows all items in item bar			for(var i:int=0; i<Action.list.length; i++) //check for collisions with all items			{				Action.list[i].visible = true;			}		}				public function checkActions(iType:int){ //checks to see if an item of the specified type already exists (one time spawning checks)			for(var i:int=0; i<Action.list.length; i++) //check for collisions with all items			{				if (Action.list[i].currentFrame == iType){					return true;				}			}			return false;		}				public function spawnActions(iType){ //mostly for use from other classes			MM.main.action = new Action(iType);			MM.main.actionClip.addChild(MM.main.action);		}						//this method will destory all items in the item list		static public function killAll()		{			//keep killing the fisrt item in the list until the list is empty			while(list.length>0)			{				list[0].kill();			}		}				//this method will kill this item instance		public function kill()		{			trace ("*Action: finding [" + Tooltip.main.translateActions(this.currentFrame, false) + "(" + this.currentFrame + ")]");			for(var i:int = 0;i < list.length; i++)			{				trace ("*Action: kill(list): i:" + i + "/" + list.length + " - currentFrame:" + list[i].currentFrame);				//if this list index is me				if(list[i] == this)				{					// remove me from the item list					trace ("*Action: kill(splice): i:" + i + "/" + list.length + " - currentFrame:" + list[i].currentFrame);					list.splice(i,1);				}			}			//remove my mouse events			removeEventListener(MouseEvent.MOUSE_DOWN, dragDropDn);			removeEventListener(MouseEvent.MOUSE_UP, dragDropUp);			removeEventListener(MouseEvent.ROLL_OVER, actionOver);			removeEventListener(MouseEvent.ROLL_OUT, actionOut);			//remove my grpahic from the stage			MM.main.actionClip.removeChild(this);			trace ("*Action: kill(done)");		}	}}