package {		import flash.display.MovieClip;	import flash.display.*	import flash.text.*	import flash.events.*	import flash.net.URLRequest;	import flash.sampler.Sample;	import flash.utils.*	import flashx.textLayout.elements.InlineGraphicElement;		public class Game extends MovieClip {		trace("*Game: Form Load");		//this static main property can be used to refer to this game object from anywhere easily using Game.main 		static public var main;		static public var isGameOver:Boolean = false;		static public var isPaused:Boolean = false;		static public var webScoring:Boolean = true;		static public var devEnabled:Boolean = true;		static public var revision:int = 45;		public var totalAssets:int;		//this property will just reference the hero ship		public var kitten:Sprite;		public var house:Sprite;		public var man:Sprite;		public var foodWater:Sprite;		public var dog:Sprite;		public var statusBar:Sprite;		public var pineTree:Sprite;		public var cats:Sprite;		public var metrics:Sprite;		public var devConsole:Sprite;		//these values just store the width and height of the game		static public var WIDTH:int = 480;		static public var HEIGHT:int = 360;		static public var SPEED:int = 2;				public function Game(){			//set the static main property to this game object so we can always just use "Game.main" to refer to our game from other classes			main = this;			pauseScreen.visible=false;			gameoverScreen.visible=false;			blackMask.visible=false;			//fire up the keyboard input logic			Key.initialize(stage);			addEventListener(Event.ENTER_FRAME, enterFrame);			loaderInfo.addEventListener(ProgressEvent.PROGRESS,progressHandler);			loaderInfo.addEventListener(Event.COMPLETE,completeListener);				}				//used to track the progress of this loading swf		public function progressHandler(e:ProgressEvent):void		{			//update te loader bar as all the game sounds and bitmaps load			//loadBar.meter.scaleX = e.bytesLoaded / e.bytesTotal;		}				//when the game is done loading, hide the loading meter, and show the ui buttons		public function completeListener(e:Event):void		{			devConsole = new DevConsole(0,0);			devClip.addChild(devConsole);			//loadBar.visible = false;			SplashScreen.main.playNowButton.visible = true;			//fire onPlay event when the user clicks the play button			SplashScreen.main.playNowButton.addEventListener(MouseEvent.CLICK, playNowClick);								}						public function playNowClick(e:MouseEvent)		{			SplashScreen.main.playNowButton.visible=false;			splashScreen.visible=false;			blackMask.visible=true;			kitten = new Kitten(240, 180);			spriteClip.addChild(kitten);			//make a new kitten!				drawSprites();		}				public function enterFrame(e:Event)		{			//z-stack shuffler!			if (isGameOver == true || splashScreen.visible == true || isPaused == true){return;}			//trace (Math.abs(dog.x - man.x));			if (Math.abs(dog.x - man.x) <= 35)			{				//trace ("*Game: Dog zshuffle: dog y: " + dog.y + " - Man y: " + man.y);				if (dog.y > (man.y + 15))				{					if (spriteClip.getChildIndex(dog) < spriteClip.getChildIndex(man))					{						spriteClip.swapChildren(dog,man);					} //bring to front				}				else 				{					if (spriteClip.getChildIndex(dog) > spriteClip.getChildIndex(man))					{						spriteClip.swapChildren(dog,man);					} //send to back				}			}			if (Kitten.inTree == true)			{				if (spriteClip.getChildIndex(kitten) < spriteClip.getChildIndex(pineTree))					{						spriteClip.swapChildren(kitten,pineTree);					} //bring to front				//spriteClip.setChildIndex(kitten, numChildren-1);				//spriteClip.setChildIndex(pineTree, numChildren-4);				return;			}			if (Math.abs(kitten.x - man.x) <= 35)			{				if (kitten.y > (man.y + 15))				{					if (spriteClip.getChildIndex(kitten) < spriteClip.getChildIndex(man))					{						spriteClip.swapChildren(kitten,man);					} //bring to front				}				else 				{					if (spriteClip.getChildIndex(kitten) > spriteClip.getChildIndex(man))					{						spriteClip.swapChildren(kitten,man);					} //send to back				}			}			//cat sorter			if (Cats.main.countCats() == 0){return;} //only count cats if there ARE cats			for(var i:int=0; i<Cats.list.length; i++)			{				if (Math.abs(Cats.list[i].x - man.x) <= 35) 				{					if (Cats.list[i].y > (man.y + 15))					{						if (spriteClip.getChildIndex(Cats.list[i]) < spriteClip.getChildIndex(man))						{							spriteClip.swapChildren(Cats.list[i],man);						} //bring to front					}					else 					{						if (spriteClip.getChildIndex(Cats.list[i]) > spriteClip.getChildIndex(man))						{							spriteClip.swapChildren(Cats.list[i],man);						} //send to back					}				}			}					}				public function drawSprites()		{					cats = new Cats(3200,85);			spriteClip.addChild(cats);						//Spawn a man!			man = new Man(randomNumber(1,450),randomNumber(85,300));			spriteClip.addChild(man);						//How about an asset (or two)?			foodWater = new FoodWater(randomNumber(1,450),randomNumber(100,300));			spriteClip.addChildAt(foodWater, 0);			FoodWater.main.setFoodWater(1);			foodWater = new FoodWater(randomNumber(250,700),randomNumber(100,300));			spriteClip.addChildAt(foodWater, 0);			FoodWater.main.setFoodWater(2);						//Maybe a dog perhaps.			dog = new Dog(1000,85);			spriteClip.addChild(dog);						//Trees are important so the kitten has a fighting chance.			pineTree = new PineTree(120 + (3 * 160), 0);			spriteClip.addChild(pineTree);						//Draw four houses			house = new House(0, 0);			houseClip.addChildAt(house, 0);			house = new House(160, 0);			houseClip.addChildAt(house, 0);			house = new House(320, 0);			houseClip.addChildAt(house, 0);			house = new House(480, 0);			houseClip.addChildAt(house, 0);						//Let's draw the status bars.			statusBar = new StatusBar(10,12);			hudClip.addChild(statusBar);			StatusBar.main.formBars(0);			statusBar = new StatusBar(10,30);			hudClip.addChild(statusBar);			StatusBar.main.formBars(1);			statusBar = new StatusBar(10,48);			hudClip.addChild(statusBar);			StatusBar.main.formBars(2);						//Metrics loader time.			metrics = new Metrics(0,315);			overlayClip.addChild(metrics);		}				public function randomNumber(low:Number=0, high:Number=1):Number //returns a random number between low and high		{		  return Math.floor(Math.random() * (1+high-low)) + low;		}				public function manageState(rState:int)		{			switch (rState)			{				case 0:					isPaused = true;					pauseScreen.visible=true;					spriteClip.visible=false;					break;				case 1:					isPaused = false;					pauseScreen.visible=false;					spriteClip.visible=true;					break;				case 2:					resetGame();					break;			}		}				public function gameOver(cOD:int)		{			if (isGameOver == true) return null;			switch (cOD)			{				case 0:					//off screen					Metrics.announce.push ("Cause of Death: Sucked offscreen");					break;				case 1:					//no pets					Metrics.announce.push ("Cause of Death: Out of pets");					break;				case 2:					//no food					Metrics.announce.push ("Cause of Death: Out of food");					break;				case 3:					//no water					Metrics.announce.push ("Cause of Death: Out of water");					break;				case 4:					//dog bite					Metrics.announce.push ("Cause of Death: Eaten");					break;			}			isGameOver=true;			gameoverScreen.visible=true;			isPaused=true;			if (Metrics.list[1]){				Metrics.list[1].kill();			}			spriteClip.visible=false;			Metrics.main.sendEndScores();			//trace ("*Game gameover! :(");		}				public function resetGame()		{			Background.main.x = 0;			//kill all existing sprites			House.killAll();			Cats.killAll();			Man.killAll();			Dog.killAll();			FoodWater.killAll();			PineTree.killAll();			StatusBar.killAll();			Metrics.killAll();			Kitten.inTree = false;			Dog.dogAttack = false;			Man.main.currentlyPet = false;			FoodWater.isDrinking = false;			FoodWater.isEating = false;			House.totalHouses = 0;			drawSprites();			spriteClip.visible=true;			Kitten.main.gotoAndStop(1);			Kitten.main.x=240;			Kitten.main.y=180;			gameoverScreen.visible = false;			isGameOver = false;			isPaused = false;		}			}	}