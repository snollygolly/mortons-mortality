package{	import flash.display.*	import flash.events.*	import flash.ui.*	import flash.filters.*	import flash.utils.Timer;    import flash.events.TimerEvent;    import flash.text.TextField;	public class Morton extends MovieClip	{		//morton has this static property so he can be referenced from any class easily 		static public var main;				//morton's move speed		public var v:Number;				//buffers to keep morton from walking too far off screen		public var xBuffer:int;		public var yBuffer:int;				//a boolean property that makes sure the ship only fires when the space bar is pressed        public var spaceLocked:Boolean; //may be able to remove 		public function Morton(x_, y_)		{				//decide on edge buffers so the ship cant leave screen			main = this;			xBuffer = 10;			yBuffer = 10;			x = x_;			y = y_;			//decide on a speed for ship movement			v = 10;			//set the spaceLocked boolean to false, the spacebar is not being pressed			spaceLocked=false;			name="morton";			mortonHit.mouseEnabled=false;			mortonHit.alpha=0;			hitArea=mortonHit;			//add an ENTER_FRAME event so we can do some logic at frame rate			addEventListener(Event.ENTER_FRAME, enterFrame);			//add some listeners for key presses			MM.main.stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			MM.main.stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			//this just optimizes performance			cacheAsBitmap = true;		}								//event for key press		public function keyDownHandler(e:KeyboardEvent)		{						//if spacebar is pressed and is not currently, space bar fires bullet			if(e.keyCode == Keyboard.SPACE && spaceLocked==false)			{				//trace ("*Morton: down!");				spaceLocked=true;			}				}				//event for when a key is released		public function keyUpHandler(e:KeyboardEvent)		{			//when the spacebar is released			if(e.keyCode == Keyboard.SPACE)			{				spaceLocked=false;			}		}								//do this at frame rate		public function enterFrame(e:Event)		{			move();			for(var i:int=0; i<Door.list.length; i++)			{				if(this.hitTestObject(Door.list[i].hitArea))				{					Map.main.changeMap(Door.destlist[i], "o");				}			}		}								//at frame rate see if any of the arrows keys are being pressed		public function move()		{			//if the LEFT arrow key is being pressed and the ship isn't too far left			if(Key.isDown(Keyboard.LEFT) || Key.isDown(Keyboard.A))			{				//update its position, move it left				x -= v;				if (this.hitTestObject(Map.main.mapHit)){					x += v;				}			}			//if the RIGHT arrow key is being pressed and the ship isn't too far right			else if(Key.isDown(Keyboard.RIGHT) || Key.isDown(Keyboard.D))			{ 				x += v;				if (this.hitTestObject(Map.main.mapHit)){					x -= v;				}			}						//if the UP arrow key is being pressed and the ship isn't too far up			if(Key.isDown(Keyboard.UP) || Key.isDown(Keyboard.W) && y > yBuffer)			{				//update its position, move it up				y -= v;				if (this.hitTestObject(Map.main.mapHit)){					y += v;				}			}			//if the DOWN arrow key is being pressed and the ship isn't too far down			else if(Key.isDown(Keyboard.DOWN) || Key.isDown(Keyboard.S) && y < (MM.HEIGHT-yBuffer - 100))			{				//update its position, move it down				y += v;				if (this.hitTestObject(Map.main.mapHit)){					y -= v;				}			}		}	}}