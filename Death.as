/*The Death Class handles the spawning and movement of all items (items are objects that can be interacted with and picked up)*/package{	import flash.display.*	import flash.events.*		public class Death extends MovieClip	{		//the list is an array of all items on stage		static public var list:Array= [];		static public var type:Array= [];		static public var main;		static public var iMarker:int; //used to reference a mouseevent object against the list of objects						public function Death(x_, y_, w_, h_, dType:String, dID:int) //dtype = click or walk, did = related death ID		{			main=this;			//add the item to the list of all items			list.push(this);			type.push(dID);			//set iType (item type)			name = dType;			x = x_;			y = y_;			width = w_;			height = h_;			switch (dType){				case "w":					addEventListener(Event.ENTER_FRAME, enterFrame); //walk					break;				case "c":					addEventListener(MouseEvent.CLICK, mouseClick); //click					break;			}		}				public function mouseClick(e:MouseEvent)		{			var object = e.target;			for(var i:int=0; i<list.length; i++) //check to see which item was drug			{				if (object == list[i]){ //items match					iMarker = i;					trace ("*Death: imarker: " + iMarker);					if (Scoreboard.main.visible == false) {Scoreboard.main.showConfirm(type[i]);}				}			}					}				public function enterFrame(e:Event){			for(var i:int=0; i<Death.list.length; i++) //check for collisions with all dors			{				if(list[i].hitTestObject(Morton.main.hitArea)){					if (Scoreboard.main.visible == false) {Scoreboard.main.showConfirm(type[i]); Map.main.saveMorton(Map.main.currentFrame);}				}			}		}		public function hideDeaths(){ //hides all items in item bar			for(var i:int=0; i<Death.list.length; i++) //check for collisions with all items			{				list[i].alpha=0;			}		}				public function showDeaths(){ //shows all items in item bar			for(var i:int=0; i<Death.list.length; i++) //check for collisions with all items			{				list[i].alpha=1;			}		}				public function spawnDeaths(x_:int,y_:int,w_:int,h_:int,dType:String, dID:int){ //mostly for use from other classes			MM.main.death = new Death(x_,y_,w_,h_,dType, dID);			MM.main.deathClip.addChild(MM.main.death);		}		//this method will destory all items in the item list		static public function killAll()		{			//keep killing the fisrt item in the list until the list is empty			while(list.length>0)			{				list[0].kill();			}		}				//this method will kill this item instance		public function kill()		{			//trace ("*Death: finding [" + Tooltip.main.translateDeaths(this.currentFrame, false) + "(" + this.currentFrame + ")]");			for(var i:int = 0;i < list.length; i++)			{				trace ("*Death: kill(list): i:" + i + "/" + list.length + " - currentFrame:" + list[i].currentFrame);				//if this list index is me				if(list[i] == this)				{					// remove me from the item list					trace ("*Death: kill(splice): i:" + i + "/" + list.length + " - currentFrame:" + list[i].currentFrame);					list.splice(i,1);					type.splice(i,1);				}			}			//remove my mouse events			switch (name){				case "w":					removeEventListener(Event.ENTER_FRAME, enterFrame);					break;				case "c":					removeEventListener(MouseEvent.CLICK, mouseClick);					break;			}						//remove my grpahic from the stage			MM.main.deathClip.removeChild(this);			trace ("*Death: kill(done)");		}	}}